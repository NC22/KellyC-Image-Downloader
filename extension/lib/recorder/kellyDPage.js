KellyDPage = new Object();
KellyDPage.env = false;
KellyDPage.sandBox = false;

KellyDPage.urlMapDocs = false; // urlmap for docs was added to common urlmap array
KellyDPage.urlMap = []; // common urlmap for current loaded storage

KellyDPage.storage = false;
KellyDPage.stat = {uniqDocsNum : 0, displayedItemsNum : 0};

// .defaultPageParser

/*
    DOM
    
    .statInfoBlock
    .commonFilters
*/

KellyDPage.cats = {
    
    imageBasic : {name : 'Basic image', id : false, color : false, l : false}, 
    imageRelated : {name : 'Related image'},
    imageError : {name : 'Load error', exclude : true, order : 1}, // load errors \ 1x1 images

    // post processing \ detected by driver groups that helps to filter good images from recorded stream
    
    
    loadDocError : {name : 'Load fail (Doc)', color : "#db5471"},  
    
    imageByDocument : {name : 'Original Image (Doc)', selected : 110},    
    imageOriginal : {name : 'Original (HD)', selected : 100, color : '#45ea6b'},
    imagePreview : {name : 'Preview', selected : 2, color : '#45dbea'},
    imageAny : {name : 'Media', selected : 1, color : '#45dbea'},
    
    imageTrash : {name : 'Misc', exclude : true},
    imageSrcSet : {name : 'Alt Sizes'},
    
    imageBg : {name : 'Background image'},
    
    withDoc : {name : 'With doc link'},
    unsettedFormat : {name : 'Unsetted ext'},
    
    srcVideo : {name : 'Video', exclude : true},
    srcIcon : {name : 'Icon', exclude : true},
    
    // autogenerated groups for detected image formats can be overrided here
    
    SVG : {name : 'SVG', exclude : true},
}

// todo - на сайтах которые подгружают данные с внешних сайтов (Google, fixed in Yandex) нужно выставлять динамический реферер равный ссылке на внешний хост а не на текущий хост вкладки (добавить как отдельную опцию)
// очищать кеш dispetcher.recorder после сбора данных из фона ? (лучше оставлять, они перезаписываются корректно и стек не переполняется)
//
// Tor - очищает cookie при зарпросах с окна расширения - добавить опцию для записи cookie вместе с url. таба 
//
// todo - optional skip loadimg stage +\- - реализовано для фильтра по параметрам / не реализовано для Related Docs
// todo - доп. опции для парсера - захват видео \ вывод статуса (подробнее в kellyPageWatchdog)
// todo - замена таймеров в kellyThreadWork на "не засыпающий" через вызовы по sendMessage

// todo - лог ошибок при запросах доп. доков.
// todo - данные для POST запросов в FETCH_RULES

// progress bar controller - used for [Load related docs.], [Load proportions], [Filter] (only text \ proggress bar unused) actions
// todo - move common progress bar methods to this object (init, reset, update, etc.)

KellyDPage.aDProgress = {
    
    current : 0, total : 0, fail : 0, errorItems : [], errors : [], // todo - restart fail items - add them "Fail load doc"
    
    minW : 0, maxW : 0, 
    minH : 0, maxH : 0,
    
    maxErrorsShow : 1000,
    progressbar : false, // progressbar container
    statistic : false, // statistic container
    statisticErrors : false,
    
    set : function(cfg) {
        
        for (var k in cfg) {
            
            if (k == 'resetErrors') {
                
                KellyDPage.aDProgress.errorItems = [];        
                KellyDPage.aDProgress.errors = [];
                
            }
            
            KellyDPage.aDProgress[k] = cfg[k];
        }
    },
    
    getErrorListToolTip : function() {
        
        if (!KellyDPage.aDProgress.etooltip) {
            KellyDPage.aDProgress.etooltip = KellyTools.getNoticeTooltip(KellyDPage.env.hostClass, KellyDPage.env.className);
            KellyDPage.aDProgress.etooltip.updateCfg({closeByBody : false, closeButton : true, removeOnClose : false});
        }
        
        return KellyDPage.aDProgress.etooltip;
    },
    
    addErrorItem : function(item, error) {
        
        var handler = KellyDPage.aDProgress;            
            handler.errorItems.push(item);
            handler.errors.push(error); 

        if (handler.etooltip && handler.etooltip.isShown()) {
            handler.updateErrorList();
        }
    },
    
    updateErrorList : function() {
        
        var handler = KellyDPage.aDProgress;
        var html = '';
        for (var i=0; i < handler.errors.length; i++) {
            
            if (i+1 <= handler.maxErrorsShow) {
                html+= '<div>' + handler.errors[i] + '</div>';
            }
        }
        
        KellyTools.setHTMLData(handler.getErrorListToolTip().getContent().getElementsByClassName(KellyDPage.env.className + '-error-list-errorsLine-box')[0], html); 
    },
    
    showErrorList : function() {
         
        var handler = KellyDPage.aDProgress;
        html = '<div class="' + KellyDPage.env.className + '-error-list-errorsLine">\
                    <div>Errors:</div>\
                    <div class="' + KellyDPage.env.className + '-error-list-errorsLine-box">' + html + '</div>\
               </div>';                    
       
        
        KellyTools.setHTMLData(handler.getErrorListToolTip().getContent(), html);   
        handler.updateErrorList();
        handler.getErrorListToolTip().show(true);        
    },
    
    update : function(show) {
        
        var handler = KellyDPage.aDProgress;
        
        if (!show) {
            
            KellyDPage.commonFiltersInfo.classList.add('collapsed');
            
            handler.progressbar.classList.add('hidden');
            handler.statistic.classList.add('hidden');
            handler.statisticErrors.classList.add('hidden');
            return;
        }
                
        handler.statistic.classList.remove('hidden');
        KellyDPage.commonFiltersInfo.classList.remove('collapsed');
        
        if (handler.errors.length > 0) {            
            handler.statisticErrors.classList.remove('hidden');
            handler.errorCounter.innerText = 'Errors : ' + handler.errors.length;
        } else {            
            handler.statisticErrors.classList.add('hidden');
        }
        
        if (handler.current && handler.total) {
           
            handler.progressbar.classList.remove('hidden');        
            
            var complete = Math.round(handler.current / (handler.total / 100));
            
            var bad = handler.fail ? Math.round(handler.fail / (handler.total / 100)) : 0;
            if (bad > 100) bad = 100;
            
            handler.state.innerText = handler.current + ' / ' + handler.total;        
            handler.line.style.width = complete + '%';
            handler.lineErr.style.width = bad > 0 ?  bad + '%' : '0px';
            
        } else {
            handler.progressbar.classList.add('hidden');
        }
    }
};

// get category by .cats array key, creates it in items storage if its not created yet 

KellyDPage.getCat = function(key) {
    
    if (!KellyDPage.cats[key]) {
         KellyDPage.cats[key] = {name : key};
    }
    
    if (!KellyDPage.cats[key].id) {
        var cat = K_FAV.getStorageManager().getCategoryBy(KellyDPage.storage, KellyDPage.cats[key].name, 'name');
        if (cat.id == -1) cat = {id : K_FAV.getStorageManager().categoryCreate(KellyDPage.cats[key], KellyDPage.storage)};
        
        KellyDPage.cats[key].id = cat.id;
    }
    
    return KellyDPage.cats[key];
}

KellyDPage.addUrlMapItem = function(ext, location, referrer) {
    if (ext != 'dataUrl') {

        KellyDPage.urlMap.push([location.href, referrer]);
        if (location.hostname && KellyDPage.env.hostList.indexOf(location.hostname) == -1) KellyDPage.env.hostList.push(location.hostname);
    }
}

// Experimental controller : for preview items that created from one tile, possible to use for originals in future.
// works with url strings like - data:image-tilemap;[tilemap image url],[preview pos x],[preview pos y],[preview width],[preview height]

KellyDPage.tileMapControll = {
    mapsSrcs : [], maps : [],
    getBlankCanvas : function(w, h) {        
        if (!KellyDPage.tileMapControll.canvas) KellyDPage.tileMapControll.canvas = document.createElement('canvas');
            KellyDPage.tileMapControll.canvas.width = w;				
            KellyDPage.tileMapControll.canvas.height = h;
            KellyDPage.tileMapControll.canvas.getContext('2d').clearRect(0, 0, w, h);
        return KellyDPage.tileMapControll.canvas;
    },
    addUrlTileMapItem : function(url, referrer) {
    
        url = url.split(';')[1].split(',');            
        var data = {tileMapSrc : url[0], x : url[1], y : url[2], width : url[3], height : url[4], postItem : false}, mapIndex = KellyDPage.tileMapControll.mapsSrcs.indexOf(data.tileMapSrc);        
            data.src = KellyDPage.tileMapControll.getBlankCanvas(data.width, data.height).toDataURL();
            data.location = KellyTools.getLocationFromUrl(data.src); // need to keep it as URL object for compatibility with KellyDPage.addStorageItem method 
                          
         if (mapIndex == -1) {            
            KellyDPage.addUrlMapItem(KellyTools.getUrlExt(data.tileMapSrc), KellyTools.getLocationFromUrl(data.tileMapSrc), referrer);
            KellyDPage.tileMapControll.mapsSrcs.push(data.tileMapSrc);
            mapIndex = KellyDPage.tileMapControll.mapsSrcs.length - 1;
            KellyDPage.tileMapControll.maps[mapIndex] = {src : data.tileMapSrc, tiles : [], image : false};
         }
         
         KellyDPage.tileMapControll.maps[mapIndex].tiles.push(data);
         return data;
    },
    initTileMapLoad : function(tm) {
        
        tm.image = new Image();
        tm.image.src = tm.src;
        tm.image.onerror = function() { console.log('fail to load tilemap'); }      
        tm.image.onload = function() {
            
            for (var i = 0; i < tm.tiles.length; i++) {
                var item = tm.tiles[i];
                KellyDPage.tileMapControll.getBlankCanvas(item.width, item.height).getContext('2d').drawImage(tm.image, item.x, item.y, item.width, item.height, 0, 0, item.width, item.height);
                if (item.postItem) item.postItem.pImage = KellyDPage.tileMapControll.canvas.toDataURL();                
            }
            
            K_FAV.updateImagesBlock();                
            K_FAV.updateImageGrid();
        }  
    },
    loadTileMaps : function() {
        for (var i = 0; i < KellyDPage.tileMapControll.maps.length; i++) KellyDPage.tileMapControll.initTileMapLoad(KellyDPage.tileMapControll.maps[i]);
    },
}

KellyDPage.addStorageItem = function(src, doc, referrer, groups) {
                                
     var ext = KellyTools.getUrlExt(src), location = KellyTools.getLocationFromUrl(src), tileMapData = false;
     groups.push(ext ? ext.toUpperCase() : 'unsettedFormat');  // extension could be undefined if route is unclear (we can check if this is actually image when img.onerror occurs)
     
     //if (K_FAV.getStorageManager().searchItem(storage, {link : src}) !== false) return;

     if (ext == 'dataUrl' && src.indexOf('tilemap') != -1) {
         tileMapData = KellyDPage.tileMapControll.addUrlTileMapItem(src, referrer);
         location = tileMapData.location;
     } else KellyDPage.addUrlMapItem(ext, location, referrer);
     
     var catList = [];
     for (var i = 0; i < groups.length; i++)  {
         catList.push(KellyDPage.getCat(groups[i]).id);
     }
            
     var itemData = K_FAV.getStorageManager().createDbItem({ 
            images : location.href,
            info : false,
            cats : catList,
            referrer : referrer, // keep referrer for proper profile works in future
            postLink : location.href,    
            relatedDoc : doc,
            vd : groups.indexOf('srcVideo') != -1,
     }, KellyDPage.storage, false, true);
          
     if (tileMapData) tileMapData.postItem = itemData.postItem;     
     return itemData;    
}

// full restart needed only first time and when hostlist modified

KellyDPage.updateUrlMap = function(onReady, restart) {
        
    console.log('[updateUrlMap] ' + (restart ? '[full restart]' : '[update urlmap]') + ' ...');
    
    KellyDPage.env.webRequestsRules = {
        referrer : false,
        urlMap : KellyDPage.urlMap,
        hostList : KellyDPage.env.hostList,
        types : false,
        method : 'registerDownloader',
        unlistedReferer : KellyDPage.defaultPageParser.host, // DEFAULT referer for unlisted \ unexpected requests dont with 301 redirect - manifest v3 cant dinamicly add new urls on redirects, so this can be usefull if site return 301
        browser : KellyTools.getBrowserName(),
    };
    
    if (restart) {
        var request = KellyDPage.env.webRequestsRules;
    } else {
        var request = {method : 'updateUrlMap', urlMap : KellyDPage.urlMap, unlistedReferer : KellyDPage.defaultPageParser.host,};
    }
    
    K_FAV.initWebRequestRules(request, onReady);
}

KellyDPage.updateDisplayedState = function() {
    
    if (!KellyDPage.commonFilters) return;

    var items = K_FAV.getGlobal('fav').items, displayed = K_FAV.getGlobal('filtered'), docs = [];
    
    for (var i = 0; i < displayed.length; i++) {
        var item = items[displayed[i]];
        if (item.relatedDoc && docs.indexOf(item.relatedDoc) == -1) docs.push(item.relatedDoc);
    }
        
    KellyDPage.statInfoBlock.innerText = KellyLoc.s('Элементы : __ITEMS__ | Документы : __RELATED_DOCS__', 'recorder_displayed_info', {ITEMS : displayed.length, RELATED_DOCS : docs.length});
    KellyDPage.stat = {uniqDocsNum : docs.length, displayedItemsNum : displayed.length};
    return KellyDPage.stat;
}

KellyDPage.loadProportions = function(items, displayed, onEnd) {
   
    if (K_FAV.dataFilterLock) return false;
    K_FAV.dataFilterLock = {message : KellyLoc.s('', 'recorder_load_beasy'), context : 'loadProportions'};
  
    KellyDPage.aDProgress.set({resetErrors : true, total : displayed ? displayed.length : items.length, current : 0, fail : 0});
    
    var getStatistic = function(context) {
        
        KellyDPage.aDProgress.set({current : 0, fail : 0});    
        for (var i = 0; i < KellyDPage.aDProgress.total; i++) {
            
            var item = displayed ? items[displayed[i]] : items[i];
            
                 if (!item.pw || item.pw == -2) continue; // currently waiting for its order ||  load job in progress
            else if (item.pw > 0) {
                
                KellyDPage.aDProgress.current++; // load successfull
                
                if (KellyDPage.aDProgress.minW == 0 || item.pw < KellyDPage.aDProgress.minW) KellyDPage.aDProgress.minW = item.pw;      
                if (item.pw > KellyDPage.aDProgress.maxW) KellyDPage.aDProgress.maxW = item.pw; 
                if (KellyDPage.aDProgress.minH == 0 || item.ph < KellyDPage.aDProgress.minH) KellyDPage.aDProgress.minH = item.ph;
                if (item.ph > KellyDPage.aDProgress.maxH) KellyDPage.aDProgress.maxH = item.ph; 
                
            } else KellyDPage.aDProgress.fail++; // load fail or image have bad bounds - pw = -1
              
        }
        
        var statistic = KellyLoc.s('', 'recorder_min') + ' : ' + KellyDPage.aDProgress.minW + 'x' + KellyDPage.aDProgress.minH;
            statistic += ' | ' + KellyLoc.s('', 'recorder_max') + ' : ' + KellyDPage.aDProgress.maxW + 'x' + KellyDPage.aDProgress.maxH;
            
            if (context != 'onEnd') statistic = KellyLoc.s('', 'recorder_load_proportions') + '</br>' + statistic;
            
            return statistic;
    }
    
    KellyDPage.aDProgress.imgLoader = KellyLoadDocControll.createImageLoaderController({
            onEnd : function(reason) {
                
                console.log('[Load proportions] onEnd [' + reason + '] | Items : ' + KellyDPage.aDProgress.total);
                K_FAV.dataFilterLock = false;
                
                if (reason == 'stop') {                    
                    
                    KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('', 'recorder_canceled');
                    KellyDPage.aDProgress.update(true); // false
                    
                } else {
                    
                    KellyTools.setHTMLData(KellyDPage.aDProgress.statistic, getStatistic('onEnd'));
                    KellyDPage.aDProgress.update(true);
                }
                                
                KellyDPage.aDProgress.imgLoader = false;
                if (onEnd) onEnd(reason);
            },                    
            onAskJob : function(controller) {
                
                KellyTools.setHTMLData(KellyDPage.aDProgress.statistic, getStatistic('onAskJob'));
                KellyDPage.aDProgress.update(true);
                
                for (var i = 0; i < KellyDPage.aDProgress.total; i++) {
                    var item = displayed ? items[displayed[i]] : items[i];

                    if (!item.pw) {
                        item.pw = -2; item.ph = -2;
                        return {src : item.pImage, item : item};     
                    }
                }                   
                
                return false;
            },
            onImageLoad : function(controller, item, proportions, error) {
                                    
                item.pw = proportions[0];
                item.ph = proportions[1];
                
                KellyTools.setHTMLData(KellyDPage.aDProgress.statistic, getStatistic('onImageLoad'));
                
                if (error) {
                    KellyDPage.aDProgress.addErrorItem(item, "Image load fail : " + item.pImage);
                }
                
                KellyDPage.aDProgress.update(true);
            },
        }, KellyDPage.storage.coptions.recorderThread);
        
    KellyDPage.aDProgress.imgLoader.run(); 
    return true;
}

KellyDPage.showAdditionFilters = function() {
    
    if (KellyDPage.commonFilters) return;
    
    var cl = KellyDPage.env.className, section = document.getElementById(cl + '-sidebar-wrap'), html = '', collapsedExtra = (K_FAV.mobileOptimization ? 'collapsed' : ''); // default state for addition filters tab
    
    KellyDPage.commonFilters = document.createElement('div');
    KellyDPage.commonFilters.className = cl + '-common-filters-wrap';
    
    section.insertBefore(KellyDPage.commonFilters, section.firstChild);
        
    KellyDPage.statInfoBlock = document.createElement('DIV');
    KellyDPage.statInfoBlock.className = cl + '-displayed-info';
    
    var compatibleFilter = KellyDPage.defaultPageParser.getCompatibleFilter();
    var isLoadRelatedSupport = compatibleFilter && compatibleFilter.manifest.detectionLvl.indexOf('imageByDocument') != -1;
    
    KellyDPage.env.getMainContainers().menu.appendChild(KellyDPage.statInfoBlock);

    html += '<div class="' + cl + '-extra-sort ' + cl + '-section-header-inline ' + cl + '-section-sidebar_section_extra_sort" data-target="sidebar_section_extra_sort">\
                <span>&#9660; ' + KellyLoc.s('', 'recorder_sort') + '</span>\
            </div>';
            
    html += '<div class="' + cl + '-ModalBox ' + cl + '-ModalBox-section ' + cl + '-ModalBox-addition ' + cl + '-section-sidebar_section_extra_sort collapsed" data-title="sidebar_section_extra_sort">'; 
    
    html += '<div class="' + cl + '-ModalBox-content ' + cl + '-ModalBox-addition-content">';
    html += '<div class="' + cl + '-buttons  ' + cl + '-buttons-proportions">\
                <p>' + KellyLoc.s('', 'recorder_sort_proportions') + '</p>\
                <button class="' + cl + '-proportions-desc" data-sort="desc">' + KellyLoc.s('', 'recorder_desc') + '</button>\
                <button class="' + cl + '-proportions-asc" data-sort="asc">' + KellyLoc.s('', 'recorder_asc') + '</button>\
             </div>';
             
    html += '<div class="' + cl + '-buttons ' + cl + '-buttons-order ' + cl + '-buttons-last">\
                <p>' + KellyLoc.s('', 'recorder_sort_order') + '</p>\
                <button class="' + cl + '-order-asc" data-sort="asc">' + KellyLoc.s('', 'recorder_order_direct') + '</button>\
                <button class="' + cl + '-order-desc" data-sort="desc">' + KellyLoc.s('', 'recorder_order_reverse') + '</button>\
             </div>'; 
             
    html += '</div>';                 

    html += '</div>';
    html += '<div class="' + cl + '-extra-filters ' + cl + '-section-header-inline ' + cl + '-section-sidebar_section_extra_filters" data-target="sidebar_section_extra_filters">\
                <span>&#9660; ' + KellyLoc.s('', 'recorder_extra_filters') + ' ' + '&nbsp;&nbsp;&nbsp;(<a href="#" class="' + cl + '-help">' + KellyLoc.s('', 'tip') + '</a>)' + '</span>\
            </div>';
            
    html += '<div class="' + cl + '-ModalBox ' + cl + '-ModalBox-section ' + cl + '-ModalBox-addition ' + collapsedExtra + '" data-title="sidebar_section_extra_filters">'; 
    
    html += '<div class="' + cl + '-ModalBox-content ' + cl + '-ModalBox-addition-content">';

    html += '<div class="' + cl + '-bounds"> \
                <input type="text" class="' + cl +'-filter-width ' + cl + '-wMin" placeholder="' + KellyLoc.s('', 'recorder_width') + '" value=""> x \
                <input type="text" class="' + cl + '-filter-height ' + cl + '-hMin" placeholder="' + KellyLoc.s('', 'recorder_height') + '" value=""> - \
                <input type="text" class="' + cl +'-filter-width ' + cl + '-wMax" placeholder="' + KellyLoc.s('', 'recorder_width') + '" value=""> x \
                <input type="text" class="' + cl + '-filter-height ' + cl + '-hMax" placeholder="' + KellyLoc.s('', 'recorder_height') + '" value="">\
            </div>';
            
    html += '<div class="' + cl + '-url-exclude">\
                <input type="text" class="' + cl + '-filter-url-exclude ' + cl + '-excUrl" placeholder="' + KellyLoc.s('Exclude urls', 'recorder_exclude_urls') + '">\
                <label><input type="checkbox" class="' + cl + '-excUrlReg"> ' + KellyLoc.s('Reqular expression', 'recorder_regular_expr') + '</label>\
             </div>'; 
             
    html += '<div class="' + cl + '-url">\
                <input type="text" class="' + cl + '-filter-url ' + cl + '-srcUrl" placeholder="' + KellyLoc.s('', 'recorder_match_url') + '">\
                <label><input type="checkbox" class="' + cl + '-srcUrlReg"> ' + KellyLoc.s('Reqular expression', 'recorder_regular_expr') + '</label>\
            </div>';
            
    html += '<div class="' + cl + '-buttons ' + cl + '-buttons-single ' + cl + '-buttons-filter"><button class="' + cl + '-filter">' + KellyLoc.s('Filter', 'recorder_filter') + '</button></div>';

    html += '<div class="' + cl + '-buttons ' + cl + '-buttons-last">\
                <button class="' + cl + '-related-links">' + (isLoadRelatedSupport ? '<span class="' + cl + '-checkmark"></span>' : '') + KellyLoc.s('Load related links', 'recorder_load_related_doc') + '</button>\
                <button class="' + cl + '-related-links-options ' + cl + '-iconset1 ' + cl + '-icon-gear"></button>\
             </div>';
             
    html += '<div class="' + cl + '-related-links-options-wrap ' + cl + '-hidden">\
                <div class="' + cl + '-related-links-options">\
                    <select class="' + cl + '-relatedDocLimit">\
                        <option value="one" selected>' + KellyLoc.s('', 'related_doc_limit_one') + '</option>\
                        <option value="all" >' + KellyLoc.s('', 'related_doc_limit_all') + '</option>\
                    </select>\
                    <input type="text" class="' + cl + '-filter-url-related ' + cl + '-relatedDocTrustedUrl" placeholder="' + KellyLoc.s('', 'recorder_related_doc_trusted_url') + '">\
                    <label><input type="checkbox" class="' + cl + '-relatedDocTrustedUrlReg"> ' + KellyLoc.s('Reqular expression', 'recorder_regular_expr') + '</label>\
                    <label><input type="checkbox" class="' + cl + '-relatedDocDeepSearch"> ' + KellyLoc.s('', 'recorder_related_doc_deep_search') + '</label>\
                </div>\
            </div>';
            
    html += '</div>';                 

    html += '</div>';
    html += '<div class="' + cl + '-extra-filters ' + cl + '-section-header-inline ' + cl + '-section-sidebar_section_extra_progress" data-target="sidebar_section_extra_progress"></div>';
    
    html += '<div class="' + cl + '-ModalBox ' + cl + '-ModalBox-section ' + cl + '-ModalBox-addition ' + cl + '-ModalBox-addition-informer collapsed" data-title="sidebar_section_extra_progress">'; 
        html += '<div class="' + cl + '-ModalBox-content ' + cl + '-ModalBox-addition-content">';
        
            html += '<div class="' + cl + '-downloader-statistic hidden"></div>';                
            html += '<div class="' + cl + '-downloader-progressbar hidden">\
                         <div class="' + cl + '-downloader-progressbar-line ' + cl + '-downloader-progressbar-line-ok" style="width: 0%;"></div>\
                         <div class="' + cl + '-downloader-progressbar-line ' + cl + '-downloader-progressbar-line-err" style="width: 0px;"></div>\
                         <div class="' + cl + '-downloader-progressbar-state"></div>\
                     </div>';
            html += '<div class="' + cl + '-downloader-errors hidden"><a href="#" class="' + cl + '-downloader-errors-counter"></a></div>';
            
        html += '</div>';
    html += '</div>';  
             

    html += '<div class="' + cl + '-ModalBox ' + cl + '-Main-download-btn-ModalBox"><button class="' + cl + '-Main-download-btn ' + cl + '-btn-link" >' + KellyLoc.s('', 'download') + '</button></div>';
     
    KellyTools.setHTMLData(KellyDPage.commonFilters, html); 
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-Main-download-btn').onclick = function() {
        KellyDPage.commonFilters.querySelector('[data-title=sidebar_section_extra_filters]').classList.add('collapsed');
        K_FAV.toogleDownloadManager();
        return false;
    }
    
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-help').onclick = function() {
        
        if (K_FAV.dataFilterLock) return false;
        
        var tooltip = KellyTools.getNoticeTooltip(KellyDPage.env.hostClass, KellyDPage.env.className), data = {CHECKMARK : '<span class="' + cl + '-checkmark"></span>'};
        var html = KellyLoc.s('', 'recorder_filter_help', data);
        
        for (var i = 1; i <= 10; i++) html += KellyLoc.s('', 'recorder_filter_help_' + i, data);
           
        KellyTools.setHTMLData(tooltip.getContent(), '<div>' + html + '</div>');                
        tooltip.show(true);
        
        return false;
    }
    
    KellyDPage.aDProgress.progressbar = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-progressbar');
    KellyDPage.aDProgress.line = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-progressbar-line-ok');
    KellyDPage.aDProgress.lineErr =  KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-progressbar-line-err');
    KellyDPage.aDProgress.state = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-progressbar-state');
    KellyDPage.aDProgress.statistic = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-statistic');
    KellyDPage.aDProgress.statisticErrors = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-errors');
    KellyDPage.aDProgress.errorCounter = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-downloader-errors-counter');
    KellyDPage.commonFiltersInfo = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-ModalBox-addition-informer');
    
    KellyDPage.aDProgress.errorCounter.onclick = function() {
        KellyDPage.aDProgress.showErrorList();
        return false;
    }
    
    var sections = KellyDPage.commonFilters.getElementsByClassName(cl + '-section-header-inline');
    for (var i = 0; i < sections.length; i++) {
        
        sections[i].onclick = function(e) {
        
            if (K_FAV.dataFilterLock) return;
            if (e.target.classList.contains(cl + '-help')) return false;
            
            for (var i = 0; i < sections.length; i++) {
                                
                if (sections[i] == this) continue;
                
                var collapseBox = KellyDPage.commonFilters.querySelector('[data-title=' + sections[i].getAttribute('data-target') + ']');
                if (collapseBox) collapseBox.classList.add('collapsed');
            }
            
            var box = KellyDPage.commonFilters.querySelector('[data-title=' + this.getAttribute('data-target') + ']');
            if (box.classList.contains('collapsed')) box.classList.remove('collapsed');
            else box.classList.add('collapsed');
        }
    }
    
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-related-links-options').onclick = function() {
        KellyTools.toogleActive(KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-related-links-options-wrap'), cl);
    }

    // Filter items [Action]

    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-filter').onclick = function() {
        
        var self = this;
        if (KellyDPage.aDProgress.imgLoader) {
            KellyDPage.aDProgress.imgLoader.stop();
            return false;
        }
        
        if (!KellyDPage.storage) return;        
        if (K_FAV.dataFilterLock) return;
        
        var filters = K_FAV.getFilters(filters), unknownBounds = 0, boundsRequired = false;
        var filterKeys = ['wMin', 'hMin', 'wMax', 'hMax', 'srcUrl', 'excUrl', 'srcUrlReg', 'excUrlReg']; 
            filterKeys.forEach(function(key) {
                 var input = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-' + key);
                 if (!input) return;
                 if (['wMin', 'hMin', 'wMax', 'hMax'].indexOf(key) != -1 && input.value) boundsRequired = true;
                 
                 filters[key] = ['srcUrlReg', 'excUrlReg'].indexOf(key) != -1 ? input.checked : input.value;
            });
                 
        var filterRun = function() {
            
            self.innerText = KellyLoc.s('Filter', 'recorder_filter'); 
            K_FAV.setFilters(filters); 
            K_FAV.updateFilteredData();                    
            K_FAV.updateImagesBlock();                
            K_FAV.updateImageGrid();

            KellyDPage.aDProgress.set({total : 0, current : 0, fail : 0});
            KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('Данные отфильтрованы', 'recorder_filtered');
            KellyDPage.aDProgress.update(true);
        }
        
        if (boundsRequired) {
            
            for (var i = 0; i < KellyDPage.storage.items.length; i++) {
                if (!KellyDPage.storage.items[i].pw) unknownBounds++;
            }
                        
            console.log('Filter data - Need to update before filter by bounds - ' + unknownBounds);
                        
            if (unknownBounds > 0 && !KellyDPage.aDProgress.imgLoader) {
                self.innerText = KellyLoc.s('', 'recorder_load_prop_skip');
                KellyDPage.loadProportions(KellyDPage.storage.items, false, filterRun); 
            } else filterRun();
            
        } else filterRun();        
    }
    
    // Load related data [Action]
    
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-related-links').onclick = function() {
        
        var self = this;
        if (KellyDPage.aDProgress.docLoader && KellyDPage.aDProgress.docLoader.getCurrentStage() != 'off') {
            KellyDPage.aDProgress.docLoader.stop();
            return false;
        }
        
        if (K_FAV.dataFilterLock) return false;                
        K_FAV.dataFilterLock =  {message : KellyLoc.s('', 'recorder_load_beasy'), context : 'loadRelatedDoc'};  
        
        KellyDPage.aDProgress.set({resetErrors : true});
        KellyDPage.aDProgress.docLoader = new KellyLoadDocControll({
                storage : KellyDPage.storage, 
                filtered : K_FAV.getGlobal('filtered'), 
                threadOptions : KellyDPage.storage.coptions.recorderThread,
        });
        
        KellyDPage.aDProgress.docLoader.additionOptions = {
            'relatedDocDeepSearch' : false, 
            'relatedDocTrustedUrl' : false, 
            'relatedDocTrustedUrlReg' : false,
            'relatedDocLimit' : 'all',
       };
        
        for (var aOptionKey in KellyDPage.aDProgress.docLoader.additionOptions) {
            
            var input = KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-' + aOptionKey);
            if (!input) continue;
         
            KellyDPage.aDProgress.docLoader.additionOptions[aOptionKey] = ['relatedDocDeepSearch', 'relatedDocTrustedUrlReg'].indexOf(aOptionKey) != -1 ? input.checked : input.value;
        }
        
               
        KellyDPage.aDProgress.docLoader.events.onRelatedDocImageCheck = function(item) {
            
            // calls on stage 2. after load related document image - used native behave
            // check matches with already addeded items and add Original group | if return TRUE - accept without default check
            // item.relatedItem.ph -- original "preview" item from where related document was recieved new item [item.ph item.pw item.src]
        }
      
        KellyDPage.aDProgress.docLoader.events.onUpdateState = function(stage, context, stat) {
                        
            if (stage != 'off') {
                
                KellyDPage.aDProgress.set({total : stat.total, current : stat.current, fail : 0}); // todo - get relateddoc load fail num, with errors list
                
                var data = {};
                if (stage == 'loadDoc') data = {IMAGESNUM : stat.images, IMAGESNUM_TRUSTED : stat.trustedImages}; 
                                
                KellyTools.setHTMLData(KellyDPage.aDProgress.statistic, KellyLoc.s('', 'recorder_load_doc_' + stage, data));  // todo - statistic этап перезатирается заметкой, не информативно. recorder_load_doc_loadImg    
            } 
                
            if (context == 'onDownloadDoc') {
                
                if (KellyDPage.aDProgress.docLoader.lastError) {
                    
                    var failJobItem = KellyDPage.aDProgress.docLoader.lastErrorData;
                    KellyDPage.aDProgress.addErrorItem(failJobItem, '[FAIL] ' + KellyDPage.aDProgress.docLoader.lastError);
                }
                
            } else if (context == 'onDownloadDocEnd') {
                                
                // onDownloadDocEnd - calls on end of stage 1. - temp switch to stage - off. - all related documents loaded
                // now we need update urlmap to assoc with referers of related item before load and check images proportions
                
                if (KellyDPage.aDProgress.docLoader.docsImages.length > 0) {
                    
                    KellyDPage.aDProgress.docLoader.docsImages.forEach(function(item) {
                         
                        KellyDPage.addUrlMapItem(KellyTools.getUrlExt(item.src), KellyTools.getLocationFromUrl(item.src), item.relatedItem.referrer);        
                    });
                    
                    // Start stage 2.
                    
                    KellyDPage.updateUrlMap(function() {
                        
                        // self.innerText = KellyLoc.s('', 'recorder_load_prop_skip'); - todo - skip not implemented
                        KellyDPage.aDProgress.docLoader.runImgLoad();
                        
                    }, true);                    
                    
                } else {
                    
                    // cant get any data to work with - no images, or no any related documents at all
                    
                    KellyDPage.aDProgress.docLoader.events.onStagesEnd('done', 0, KellyDPage.aDProgress.docLoader.docs.length <= 0 ? 'recorder_no_related_docs' : 'recorder_cant_find_images');
                }
                
            } else if (context == 'onDownloadDoc') {
                
                // onDownloadDoc - calls on download any document during stage 1. process
                
            } else if (context == 'onImageLoad') {
                
                // onImageLoad - calls on Stage 2. any image from related doc load Fail \ Success - currently no any errors logged - require addition assgins to handler.runImgLoad - handler.lastError in LoadDocControll class
                
            }
            
            KellyDPage.aDProgress.update(true); // stage != 'off'
        }
        
        KellyDPage.aDProgress.docLoader.events.onQualityImageFound = function(relatedItem, imageData) {
            
            var origGroupName = 'imageByDocument' + (KellyDPage.aDProgress.folderNum ? '_' + KellyDPage.aDProgress.folderNum : '');
            if (imageData.groups.indexOf(origGroupName) == -1) imageData.groups.push(origGroupName); 
                        
            // todo - keep related doc as postlink
            
            var newItem = KellyDPage.addStorageItem(imageData.src, false, relatedItem.referrer, imageData.groups);
            if (newItem.itemIndex) {
                KellyDPage.storage.items[newItem.itemIndex].pw = imageData.pw;
                KellyDPage.storage.items[newItem.itemIndex].ph = imageData.ph;                
                KellyDPage.storage.items[newItem.itemIndex].orderIndex = KellyDPage.storage.items.indexOf(relatedItem);
            }
        }
        
        // reason - done \ stop
        
        KellyDPage.aDProgress.docLoader.events.onStagesEnd = function(reason, addedTotal, notice) {
                        
            var markFailedItems = function(update) {
                
                if (KellyDPage.aDProgress.errorItems.length > 0) {
                    
                    if (KellyDPage.aDProgress.errorFolderNum && !KellyDPage.cats['loadDocError_' + KellyDPage.aDProgress.errorFolderNum]) {                        
                        KellyDPage.cats['loadDocError_' + KellyDPage.aDProgress.errorFolderNum] = {
                                name : KellyDPage.cats['loadDocError'].name + ' (' + KellyDPage.aDProgress.errorFolderNum + ')', 
                                color : KellyDPage.cats['loadDocError'].color,
                        };
                    }
                    
                    var errorGroupName = 'loadDocError' + (KellyDPage.aDProgress.errorFolderNum ? '_' + KellyDPage.aDProgress.errorFolderNum : '');                    
                    KellyDPage.aDProgress.errorFolderNum = KellyDPage.aDProgress.errorFolderNum ? KellyDPage.aDProgress.errorFolderNum + 1 : 2;
                    
                    // items from KellyDPage.storage.items with fail load .relatedDoc
                    for (var i=0; i < KellyDPage.aDProgress.errorItems.length; i++) {
                        KellyDPage.aDProgress.errorItems[i].categoryId.push(KellyDPage.getCat(errorGroupName).id);
                    }
                    
                    if (update) {
                        K_FAV.updateCategoryList();
                    }
                } 
            }            
            
            if (addedTotal > 0) {
                
                KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('', 'recorder_added_images_num', {IMAGESNUM : addedTotal});    
                
                KellyDPage.storage.items.sort(function(a, b) {
                    var indexA = !a.orderIndex ? 0 : a.orderIndex, indexB = !b.orderIndex ? 0 : b.orderIndex;
                    return indexA - indexB;
                });
                
                markFailedItems();
                // new images can be added in onQualityImageFound by addStorageItem - urllist changed - need to refresh BG list again
                
                KellyDPage.updateUrlMap(function() {
                    
                    KellyDPage.setDefaultCatFilters(true);
                    
                    K_FAV.updateCategoryList();
                    K_FAV.updateFavCounter();
                    K_FAV.updateFilteredData();                    
                    K_FAV.updateImagesBlock();                
                    K_FAV.updateImageGrid();   
                });                
                
                // update group counter, add related groups for next possible round
                
                KellyDPage.aDProgress.folderNum = KellyDPage.aDProgress.folderNum ? KellyDPage.aDProgress.folderNum + 1 : 2;                
                KellyDPage.cats['imageByDocument_' + KellyDPage.aDProgress.folderNum] = {
                    name : KellyDPage.cats['imageByDocument'].name + ' (' + KellyDPage.aDProgress.folderNum + ')', 
                    selected : KellyDPage.cats['imageByDocument'].selected + KellyDPage.aDProgress.folderNum
                };
                
            } else {
                
               if (!notice) {
                    notice = reason == 'stop' ? 'recorder_canceled' : 'recorder_cant_find_originals_images';                
               }
               
               markFailedItems(true);               
               KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('', notice);       
                
            }
        
            K_FAV.dataFilterLock = false;            
            self.innerText = KellyLoc.s('', 'recorder_load_related_doc');                       
            KellyDPage.commonFilters.classList.remove(cl + '-process-docLoader-work');
                
            KellyDPage.aDProgress.update(true);
        }
        
        self.innerText = KellyLoc.s('', 'recorder_load_doc_stop');
        KellyDPage.commonFilters.classList.add(cl + '-process-docLoader-work');
        var initDocLoader = function() {
            
            if (KellyDPage.defaultPageParser.filterCallback('onInitDocLoader', {docLoader : KellyDPage.aDProgress.docLoader, hostList : KellyDPage.env.hostList}, true) === false) {
                KellyDPage.aDProgress.statistic.innerText = KellyLoc.s('', 'recorder_terminated');
                KellyDPage.aDProgress.update(true);
                return;
            }
                
            KellyDPage.aDProgress.docLoader.run();
        }
        
        if (!KellyDPage.urlMapDocs) { // is related docs already added to global urlmap list
            
            KellyDPage.urlMapDocs = true;            
            KellyDPage.storage.items.forEach(function(item) {
                if (item.relatedDoc) KellyDPage.addUrlMapItem(KellyTools.getUrlExt(item.relatedDoc), KellyTools.getLocationFromUrl(item.relatedDoc), item.referrer);                 
            });
            
            KellyDPage.updateUrlMap(initDocLoader, true);
            
        } else initDocLoader();
    }
    
    // Sort by proportions or by ID [Action]
    
    var proportionsSort = function() {
        
        if (KellyDPage.aDProgress.imgLoader) {
            KellyDPage.aDProgress.imgLoader.stop();
            return false;
        }
        
        if (K_FAV.dataFilterLock) return;
        
        var self = this, items = K_FAV.getGlobal('fav').items, sortby = this.getAttribute('data-sort'), displayed = K_FAV.getGlobal('filtered');
            self.innerText =  KellyLoc.s('', 'recorder_load_doc_stop');
            self.classList.add('selected');
            
        KellyDPage.loadProportions(items, displayed, function(reason) {
             
            self.innerText =  KellyLoc.s('', 'recorder_' + sortby);
            self.classList.remove('selected');
            
            if (reason == 'stop') return;
            
            items.sort(function(a, b) {
                
                var megaPixels = -1, megaPixelsB = -1;
                
                if (typeof a.pw == "number" && !isNaN(a.pw)) {
                    megaPixels = (a.pw * a.ph) / 1000000;
                }
                
                if (typeof b.pw == "number" && !isNaN(b.pw)) {
                    megaPixelsB = (b.pw * b.ph) / 1000000; 
                }
                
                return sortby == 'desc' ? megaPixelsB - megaPixels : megaPixels - megaPixelsB;
            });
                
            items.forEach(function(item) {
                
                 if (item.pw && item.pw >= 1 && item.pw <= 3) {
                     item.categoryId.push(KellyDPage.getCat('imageError').id);                   
                 }
                 
            });
        
            var filters = K_FAV.getFilters(filters);
                filters.catIgnoreFilters.push(KellyDPage.cats['imageError'].id);
                
            K_FAV.setFilters(filters);
            
            K_FAV.updateCategoryList();
            K_FAV.updateFilteredData();                    
            K_FAV.updateImagesBlock();                
            K_FAV.updateImageGrid();
            K_FAV.save('items');
        });
    }
    
    var orderSort = function() {
        
        if (K_FAV.dataFilterLock) return;
        
        var items = K_FAV.getGlobal('fav').items, sortby = this.getAttribute('data-sort');        
            items.sort(function(a, b) {                          
                return sortby == 'desc' ? b.id - a.id : a.id - b.id;
            });

            K_FAV.updateCategoryList();
            K_FAV.updateFilteredData();                    
            K_FAV.updateImagesBlock();                
            K_FAV.updateImageGrid();
            K_FAV.save('items');
    }
    
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-proportions-desc').onclick = proportionsSort;  
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-proportions-asc').onclick = proportionsSort;  
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-order-desc').onclick = orderSort;  
    KellyTools.getElementByClass(KellyDPage.commonFilters, cl + '-order-asc').onclick = orderSort;  
   
    KellyDPage.updateDisplayedState();    
}

// todo - make universal if more similar notices be needed, currently used for related links only

KellyDPage.showRelatedLinksNotice = function() {
      
      var options = K_FAV.getGlobal('options');
      // options.noticeTriggers.relatedLinks = false;K_FAV.save('cfg');
      if (KellyDPage.stat.uniqDocsNum <= 0 || !KellyTools.getElementByClass(KellyDPage.commonFilters, KellyDPage.env.className + '-checkmark') || options.noticeTriggers.relatedLinks) return;
   
      var tooltip = KellyTools.getNoticeTooltip(KellyDPage.env.hostClass, KellyDPage.env.className);
          tooltip.saveNoticeReadedState = function(self) {
                
                clearTimeout(tooltip.readTimer);
                
                if (tooltip.noticeReaded && !options.noticeTriggers.relatedLinks) {
                    options.noticeTriggers.relatedLinks = true;
                    K_FAV.save('cfg');
                }
          }
          
          tooltip.updateCfg({
              target : K_FAV.mobileOptimization ? 'screen' : KellyTools.getElementByClass(KellyDPage.commonFilters, KellyDPage.env.className + '-related-links'), 
              closeButton : false,
              positionY : 'bottom',
              positionX : K_FAV.mobileOptimization ? 'center' : 'right',
              ptypeX : 'inside',
              ptypeY : 'outside',
              closeByBody : true,
              avoidOutOfBounds : false,
              offset : K_FAV.mobileOptimization ? {left : 0, top : -40} : {left : 0, top : 40},
              events : {
                  onClose : tooltip.saveNoticeReadedState,
              },
          });
          
        //  tooltip.readTimer = setTimeout(function() { tooltip.noticeReaded = true; }, 5000);
          
        var html = '<a href="#" class="' + KellyDPage.env.className + '-pointer-arrow ' + KellyDPage.env.className +  '-pointer-up" style="top: -37px; right: 0;">Up</a>\
                    <p>' + KellyLoc.s('', 'recorder_related_links_notice', {HOST : KellyDPage.defaultPageParser.getCompatibleFilter().manifest.host }) + '</p>\
                    <p>' + KellyLoc.s('', 'recorder_related_links_notice_1') + '</p>\
                    <ul class="' + KellyDPage.env.className + '-menu-links">\
                        <li><a href="#" class="' + KellyDPage.env.className + '-readed">' + KellyLoc.s('', 'recorder_dont_show_again') + '</a></li>\
                        <li><a href="https://kellydownloader.com/links/loadrelated/" target="_blank" class="' + KellyDPage.env.className + '-more">' + KellyLoc.s('', 'recorder_read_about') + '</a></li>\
                    </ul>';
                    
        KellyTools.setHTMLData(tooltip.getContent(), '<div style="' + (!K_FAV.mobileOptimization ? 'max-width : 330px;' : '') + '">' + html + '</div>');     
        KellyTools.getElementByClass(tooltip.getContent(), KellyDPage.env.className + '-readed').onclick = function() {
            tooltip.noticeReaded = true;
            tooltip.show(false);
            return false;
        }
        
        tooltip.show(true);
}

KellyDPage.setDefaultCatFilters = function(byDocument) {
    
      var filters = {catIgnoreFilters : [], catFilters : [], logic : 'or'};
      
      var sKey = false;
      for (var k in KellyDPage.cats) {
            if (KellyDPage.cats[k].id) {
                    
                     if (k.indexOf('imageByDocument') != -1 && !byDocument) continue;                    
                    
                     if (KellyDPage.cats[k].selected && (sKey === false || KellyDPage.cats[k].selected > KellyDPage.cats[sKey].selected)) sKey = k;
                else if (KellyDPage.cats[k].exclude) filters.catIgnoreFilters.push(KellyDPage.cats[k].id);
            }
      }
      
      // selected group suggested on priority
      if (sKey !== false ) filters.catFilters.push(KellyDPage.cats[sKey].id);
      
      K_FAV.setFilters(filters);
}

KellyDPage.showRecordedImages = function(onShow) {
    
     KellyTools.getBrowser().runtime.sendMessage({method: "getRecord"}, function(response) {
          
          /*
            
            response.host - initiator host (from which tab recording was started) - items can contain different hosts, dont stick to that var, check referer instead
            response.images - array of collected items
            
          */
                    
          KellyTools.log('Currently data buffer : ', 'KellyDPage');
          KellyTools.log(response, 'KellyDPage');     
          
          for (var k in response.cats) KellyDPage.cats[k] = response.cats[k];
          
          // add as separate items by relatedSrc, relatedDoc only associated with first relatedSrc if item contain more then one image src
          
          for (var i = 0; i < response.images.length; i++) {
              
              for (var b = 0; b < response.images[i].relatedSrc.length; b++) {
                  
                    var groups = response.images[i].relatedGroups && response.images[i].relatedGroups[b] ? response.images[i].relatedGroups[b] : [];
                        groups.push(b > 0 ? 'imageRelated' : 'imageBasic');
                        
                    if (b == 0 && response.images[i].relatedDoc) groups.push('withDoc');
                    
                    // add item, update url map, all items stored with reffer info to keep proper loading from save profiles
                    KellyDPage.addStorageItem(response.images[i].relatedSrc[b], response.images[i].relatedDoc, response.images[i].referrer, groups);
              }  
          }
          
          KellyDPage.tileMapControll.loadTileMaps();
          KellyDPage.setDefaultCatFilters();
          K_FAV.updateFavCounter();
          
          if (!response.host) response.host = 'https://default.default/';
          var responseLocation = KellyTools.getLocationFromUrl(response.host);
          
          K_FAV.getGlobal('fav').dbName = KellyTools.generateIdWord(responseLocation.hostname.replace('.', '_') + '_record');          
          KellyDPage.defaultPageParser.setLocation({url : response.host, host : responseLocation.origin});
          
          KellyDPage.defaultPageParser.filterCallback('onRecorderImagesShow', {});   
         
          KellyTools.log('defaultPageParser : default TAB url : ' + response.url + ' | default referer : ' +  responseLocation.origin, 'KellyDPage');
          
          KellyDPage.updateUrlMap(function(){  
              K_FAV.showFavouriteImages(); 
              if (onShow) onShow();
          }, true);
          
          // console.log(KellyDPage.env.webRequestsRules);          
          // window.requestAnimationFrame(function(){ });  

          K_FAV.save('items'); // save to default profile (setted in .init method) last loaded data   
     });
}
     
KellyDPage.init = function() {
    
     window.K_FAV = false;
     document.title = KellyTools.getProgName();

     var badItems = []; 
     
     K_FAV = new KellyFavItems({env : KellyProfileRecorder.getInstance(), allowMobile : true, hideAllLock : true});

     KellyDPage.env = K_FAV.getGlobal('env');
     KellyDPage.env.hostClass = 'options_page';
     
     KellyDPage.defaultPageParser = new KellyPageWatchdog();
     
     KellyDPage.env.events.onBeforeDownloadValidate = function(handler, arrayBuffer, contentType, urlOrig, onReady) {
         
         return KellyDPage.defaultPageParser.filterCallback('onBeforeDownloadValidate', {dm : handler, arrayBuffer : arrayBuffer, contentType : contentType, url : urlOrig, onReady : onReady}, true);         
     }
     
     KellyDPage.env.events.onDisplayBlock = function(mode, action, oldMode) {
         
         var downloadButton = KellyDPage.commonFilters ? KellyTools.getElementByClass(KellyDPage.commonFilters, KellyDPage.env.className + '-Main-download-btn') : false;
         if (downloadButton) {
             downloadButton.parentElement.classList.remove(KellyDPage.env.className + '-hidden');
             if (K_FAV.getFilters().imagesAsDownloadItems) {
                 downloadButton.parentElement.classList.add(KellyDPage.env.className + '-hidden');
                 // KellyDPage.defaultPageParser.filterCallback('onInitDownloader', {dm : K_FAV.getDownloadManager()}); -- todo need more accurate place, before draw
             }
         }
         
         if (mode == 'fav' && action == 'show') {
             KellyDPage.showAdditionFilters();
             KellyDPage.statInfoBlock.style.display = '';
         }
         
         if (mode != 'fav' && action == 'show' && KellyDPage.statInfoBlock) {
             KellyDPage.statInfoBlock.style.display = 'none';
         }
     }
     
     KellyDPage.env.events.onGridBadBounds = function(self, data) {
         
          // retry before delete ?
          
          if (data.errorCode < 4 && data.tile) {

                var index = parseInt(data.tile.getAttribute('itemIndex')), item = K_FAV.getGlobal('fav').items[index];
                if (item && badItems.indexOf(index) == -1) {
                    
                    // add imageError group and upd element
                    
                    item.categoryId.push(KellyDPage.getCat('imageError').id);
                    
                    K_FAV.getStorageManager().createDbItem({ 
                            cats : item.categoryId,
                            itemIndex : index,
                    }, KellyDPage.storage, true, true);
                    
                    badItems.push(index);
                }
          }
          
          return true;
          // updateFilteredData from time to time
      }  
      
      KellyDPage.env.events.onUpdateFilteredData = function(displayedItems){
          KellyDPage.updateDisplayedState();
      }
      
      KellyDPage.env.events.onGridUpdated = function(self, isAllBoundsLoaded) {
       
          if (isAllBoundsLoaded && badItems.length) {
              
              console.log('Bad items : ' + badItems.length); // todo showCatList public?
              
              // some groups can be added during image load in KellyDPage.env.events.onGridBadBounds
              K_FAV.updateCategoryList();
              K_FAV.updateFavCounter();
          }
     }   
     
     KellyDPage.env.events.onGridResizeImages = function(self, itemInfo) {
         if (!itemInfo.boundEl.getAttribute('data-width')) return;
         if (!itemInfo.tile || !itemInfo.boundEl || itemInfo.boundEl.tagName != 'IMG') return false;
         
         var dimensionsInfo = KellyTools.getElementByClass(itemInfo.tile, KellyDPage.env.className + '-preview-dimensions'); 
         if (!dimensionsInfo) {
             dimensionsInfo = document.createElement('A');
             dimensionsInfo.title = KellyLoc.s('', 'image_main');
             dimensionsInfo.href = itemInfo.boundEl.src;
             dimensionsInfo.target = '_blank';
             dimensionsInfo.className = KellyDPage.env.className + '-preview-dimensions';
             dimensionsInfo.innerText = itemInfo.boundEl.getAttribute('data-width') + 'x' + itemInfo.boundEl.getAttribute('data-height');
             itemInfo.tile.appendChild(dimensionsInfo);
         }
     }
     
     KellyDPage.env.events.onStorageAfterload = function(fav, loadType, context, onAfterLoad) { // context == 'selectDB' 
        
        console.log('[onStorageAfterload] Data ready | mode : ' + (loadType ? loadType : ' CFG + ITEMS'));
        if (loadType == 'cfg' || !loadType) {
              
            if (!KellyDPage.storage) {
                
                KellyDPage.storage = fav;            
                K_FAV.getStorageManager().collectSource = ['user-current']; // источник данных для сохранения в профиль
                
                var defaultItemStorage = K_FAV.getStorageManager().getDefaultData();
                for (var k in defaultItemStorage) fav[k] = defaultItemStorage[k]; 
                 
                fav.selected_cats_ids = [];
                fav.categories = [];
            }
            
            // fixed options, defaults setted in kellySyorageManager and KellyDPage.env.events.onValidateCfg
            
            fav.coptions.storage = 'default'; 
            // todo - в default всегда подгружаются сразу в showRecordedImages последние записанные картинки и потом после загрузки доп. доков не сохраняются если явно не сохранить профиль - мб сохранять автоматом
            
            fav.coptions.storageDesc = {'default' : {name : KellyLoc.s('', 'recorder_last_recorded')}};            
            fav.coptions.webRequest = true;  
            fav.coptions.newFirst = false;
            fav.coptions.optionsSide = false;
            fav.coptions.grid.fixed = 4;
            fav.coptions.grid.type = 'fixed';
            fav.coptions.grid.lazy = true; // gently creates loading pool with max queryes per second
            
            // fav.coptions.grid.perPage = 60;        
        } 
        
        if (loadType == 'items' || !loadType) {
            
            K_FAV.dataFilterLock = {message : KellyLoc.s('', 'recorder_load_beasy_wr'), context : context};
            
            KellyDPage.urlMapDocs = false;
            KellyDPage.urlMap = [];
            KellyDPage.env.hostList = []; // todo - сохранять список хостов в [items]
            
            fav.items.forEach(function(item) {
                 if (item.referrer) KellyDPage.addUrlMapItem(KellyTools.getUrlExt(item.pImage), KellyTools.getLocationFromUrl(item.pImage), item.referrer);
            });
            
            KellyDPage.updateUrlMap(function(){            
                K_FAV.dataFilterLock = false;
                if (onAfterLoad) onAfterLoad();
            }, true);            
                          
            console.log('[onStorageAfterload] Update Url map required');
            return true;
        }
     }
          
    var nativeOnExtensionReady = KellyDPage.env.events.onExtensionReady;            
    KellyDPage.env.events.onExtensionReady = function() {
        
        if (nativeOnExtensionReady) nativeOnExtensionReady();
        
        KellyDPage.getContainer().removeAttribute('style');
        if (!K_FAV.defaultNavigation()) KellyDPage.showRecordedImages(); 
    }
    
    var nativeOnSideBarShow = KellyDPage.env.events.onSideBarShow;            
    KellyDPage.env.events.onSideBarShow = function(sideBarWrap, close) {
        
        if (!close) {
            
            // show help tip on first start to describe "load related documents" function 
            KellyDPage.showRelatedLinksNotice();
            
            // collapse all sections on show item editor
            if (KellyDPage.commonFilters && sideBarWrap.innerHTML.indexOf('SavePost') != -1) {
                var sections = KellyDPage.commonFilters.getElementsByClassName( KellyDPage.env.className + '-ModalBox-section');
                for (var i = 0; i < sections.length; i++) sections[i].classList.add('collapsed');
            }
        }
    }
    
    KellyDPage.env.events.onValidateCfg = function(data) {
        KellyLoadDocControll.validateCfg(data);
    } 
    
    KellyDPage.env.events.onCreateOptionsManager = function(options) {
        options.protectedOptions = ['grid_fixed', 'grid_type', 'grid_lazy', 'grid_viewerShowAs', 'optionsSide', 'bottomToolbarCollapsed', 'webRequest', 'newFirst'];
        
        delete options.tabData['BaseOptions'].parts.fast_download;
        delete options.tabData['BaseOptions'].parts.options_fav_add;
        delete options.tabData['Other'].parts.unlock_common; 

        KellyLoadDocControll.initOptions(options);
        KellyDPage.defaultPageParser.filterCallback('onInitOptions', {options : options}); 
    }

    KellyDPage.env.events.onWebRequestReady = function(method, data) {
        
        if (method == 'registerDownloader' && !KellyDPage.rendered) {
            
            KellyDPage.rendered = true;
            
            var resources = ['core', 'single', 'recorderDownloader'];
            
            if (K_FAV.getGlobal('options').darkTheme) {
                
                document.body.classList.add(KellyDPage.env.className + '-dark');
                resources.push('dark');
                
            } else {          
                // ready - need to test
                // document.body.classList.add(KellyDPage.env.className + '-white');
                // resources.push('white');
            }
            
            K_FAV.initFormatPage(resources); 
        }
    }       
       
    /*
        getGlobal('mode') - fav | ctoptions
        setFilters
        callbacks      
        
        env.events.onGridBadBounds(self, data)
        env.events.onGridUpdated(self, isAllBoundsLoaded);
        env.events.onGridLoadBounds(self, boundEl, state); 
        env.events.onGridResizeImages(self, itemInfo);
        env.events.onUpdateFilteredData(displayedItems); 
        env.events.onCreateOptionsManager(options)
        env.events.onValidateCfg(data)
        env.events.onWebRequestReady(method, data)
    */
            
    K_FAV.load('cfg', K_FAV.initBgEvents);
        
    KellyTools.setHTMLData(
        document.getElementById('submenu'), 
        '<div class="' + KellyDPage.env.className + '-copyright-info"><div id="copyright-name">' + KellyTools.getProgName() + '</div><div id="copyright-software"></div></div>'
     ); 
    KellyTools.setCopyright('copyright-software');
}

KellyDPage.getContainer = function() {   
 
    if (this.sandBox) return this.sandBox;    
    this.sandBox = document.getElementById('sandbox-env');
    return this.sandBox;    
}